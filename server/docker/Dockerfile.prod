# syntax=docker/dockerfile:1

# Use an customized image of PHP
# https://hub.docker.com/_/php
FROM php:fpm-alpine

# Install some PHP extensions
ADD --chmod=0755 https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/

RUN install-php-extensions zip pdo_mysql pdo_pgsql redis opcache intl bcmath @composer

# Set the working directory to the website files
WORKDIR /var/www/html

# Add wait script to wait for other services to be ready
ADD --chmod=0755 https://github.com/ufoscout/docker-compose-wait/releases/latest/download/wait /wait

# Copy all files to the working directory
COPY --chown=www-data:www-data . .

# Use the default or custom PHP configuration (if exists)
RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini" && \
	if [ -f "docker/php.ini" ]; then \
		mv "docker/php.ini" "$PHP_INI_DIR/php.ini"; \
	fi

# Change current user to www-data
USER www-data

# Install all Composer dependencies
# Use cache mount to speed up installation of existing dependencies
RUN --mount=type=cache,target=.composer composer install --no-dev --optimize-autoloader

# Use the PHP custom entrypoint
# https://symfony.com/doc/current/deployment.html / https://symfony.com/doc/current/setup/file_permissions.html
RUN echo '/wait && mkdir -p var/cache var/log && \
	/usr/local/bin/php bin/console cache:clear && composer dump-env prod && \
	/usr/local/bin/php bin/console doctrine:database:create --no-interaction --if-not-exists && \
	/usr/local/bin/php bin/console doctrine:schema:update --force && \
	php-fpm' > docker/entrypoint.sh && chmod +x docker/entrypoint.sh

CMD ["docker/entrypoint.sh"]